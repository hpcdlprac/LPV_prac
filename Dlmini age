import os
import numpy as np
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.models import Sequential

# Set paths
image_folder_path = "C:/Users/ABHIJIT KHULE/Desktop/faces/Train"
csv_file_path = "C:/Users/ABHIJIT KHULE/Desktop/faces/train.csv"

# Read labels from CSV
labels_df = pd.read_csv(csv_file_path)

# Take only the first 60 entries
labels_df = labels_df.head(60)

# Read images and labels
data = []
for index, row in labels_df.iterrows():
    image_path = os.path.join(image_folder_path, row['ID'])
    image = Image.open(image_path)
    image_array = np.array(image) / 255.0
    label = row['Class']
    data.append((image_array, label))

# Split data into features and labels
X = np.array([item[0] for item in data])
y = np.array([item[1] for item in data])

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(X_train.shape[1:])),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='linear')
])

# Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Evaluate model
loss = model.evaluate(X_test, y_test)
print("Test Loss:", loss)

# Plot training history
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
